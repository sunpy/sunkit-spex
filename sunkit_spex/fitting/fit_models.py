from collections import OrderedDict

import astropy.units as u
import numpy as np

RATE_UNIT = u.ph / u.cm**2 / u.s / u.keV

class PhotonModel:
    '''
    Generic photon model
    auto-getter/setters generated by ChatGPT
    '''
    def __init__(self, **kwargs):
        self.name = kwargs.pop('name', 'Photon model')
        for name, quant in kwargs.items():
            assert isinstance(quant, u.Quantity)
            setattr(self, f'_{name}', quant)
            self._create_property(name)

    def _create_property(self, name: str) -> None:
        def getter(self):
            return getattr(self, f'_{name}')

        def setter(self, value):
            setattr(self, f'_{name}', value << getattr(self, f'_{name}').unit)

        setattr(self.__class__, name, property(getter, setter))

    def current_parameters(self) -> tuple[u.Quantity]:
        raise NotImplementedError

    def update_parameters(self, *new_params) -> None:
        raise NotImplementedError
        _ = new_params


class Line(PhotonModel):
    '''
    A line with a slope and intercept.
    '''
    def __init__(self):
        super().__init__(
            name='PhotonLineModel',
            intercept=0 << RATE_UNIT,
            slope=0 << RATE_UNIT / u.keV
        )

    @u.quantity_input
    def evaluate(self, photon_bins: u.keV) -> RATE_UNIT:
        midpoints = photon_bins[:-1] + np.diff(photon_bins)/2
        return self.intercept + self.slope*midpoints

    def current_parameters(self):
        return OrderedDict({'slope': self.slope, 'intercept': self.intercept})

    def update_parameters(self, new_slope, new_intercept):
        self.slope = new_slope
        self.intercept = new_intercept

# Add more model types, or PhotonModel subclasses, below . . .